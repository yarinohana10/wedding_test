
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://dbwyevnpwriumspqlujk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRid3lldm5wd3JpdW1zcHFsdWprIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1MTA1OTQsImV4cCI6MjA1OTA4NjU5NH0.dDCB2tG6ZtagvjvIlWmf9GUoYLaK28ZaGuRD4rrMseU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to save settings to Supabase (simplified to avoid type errors)
export const saveEventSettings = async (settings: any) => {
  try {
    // Since we don't have an event_settings table defined in our database,
    // we'll save the settings to local storage for now
    localStorage.setItem('eventSettings', JSON.stringify(settings));
    return { success: true, data: settings };
  } catch (error) {
    console.error('Error saving settings:', error);
    return { success: false, error };
  }
};

// Function to get event settings from Supabase (simplified to avoid type errors)
export const getEventSettings = async () => {
  try {
    // Since we don't have an event_settings table defined in our database,
    // we'll get the settings from local storage
    const settingsStr = localStorage.getItem('eventSettings');
    const data = settingsStr ? JSON.parse(settingsStr) : {};
    return { success: true, data };
  } catch (error) {
    console.error('Error getting settings:', error);
    return { success: false, error, data: {} };
  }
};

// Function to save gallery images metadata (simplified to avoid type errors)
export const saveGalleryImages = async (images: any[]) => {
  try {
    // Since we don't have a gallery_images table defined in our database,
    // we'll save them to local storage
    localStorage.setItem('galleryImages', JSON.stringify(images));
    return { success: true, data: images };
  } catch (error) {
    console.error('Error saving gallery images:', error);
    return { success: false, error };
  }
};

// Function to get gallery images (simplified to avoid type errors)
export const getGalleryImages = async () => {
  try {
    // Since we don't have a gallery_images table defined in our database,
    // we'll get them from local storage
    const imagesStr = localStorage.getItem('galleryImages');
    const data = imagesStr ? JSON.parse(imagesStr) : [];
    return { success: true, data };
  } catch (error) {
    console.error('Error getting gallery images:', error);
    return { success: false, error, data: [] };
  }
};

// Function to get top images for carousel (simplified to avoid type errors)
export const getTopImagesForCarousel = async (limit = 5) => {
  try {
    // Since we don't have a gallery_images table defined in our database,
    // we'll get featured images from local storage
    const imagesStr = localStorage.getItem('galleryImages');
    const allImages = imagesStr ? JSON.parse(imagesStr) : [];
    const featuredImages = allImages
      .filter((img: any) => img.featured === true && img.approved === true)
      .sort((a: any, b: any) => b.rating - a.rating)
      .slice(0, limit);
      
    return { success: true, data: featuredImages };
  } catch (error) {
    console.error('Error getting top images:', error);
    return { success: false, error, data: [] };
  }
};
